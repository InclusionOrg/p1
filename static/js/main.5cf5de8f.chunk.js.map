{"version":3,"sources":["utils.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","getFormattedReservations","a","getReservations","result","console","log","formattedBooked","booked","map","rezz","slot","Date","toLocaleString","fetch","headers","then","res","json","postReservation","name","method","body","JSON","stringify","BookedReservations","styled","div","ReservationForm","Input","input","ButtonContainer","Button","button","App","state","bookedReservations","availableHours","resName","refreshReservations","reservations","available","Object","keys","filter","hour","setState","addReservation","timeSlot","alert","day","setHours","slice","newReservation","this","className","ind","key","type","value","placeholder","onChange","e","target","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5cf5de8f.chunk.js","sourcesContent":["const baseUrl = process.env.NODE_ENV !== 'production' ? `http://localhost:3001/reservations` : 'https://inclusion-p2.herokuapp.com/reservations'\n\nexport async function getFormattedReservations() {\n  const result = await getReservations();\n  console.log('result:', result);\n  const formattedBooked = result.booked.map(rezz => {\n    rezz.slot = new Date(rezz.slot).toLocaleString();\n    return rezz;\n  });\n\n  return {\n    booked: formattedBooked,\n    ...result,\n  };\n}\n\nexport async function getReservations() {\n  return fetch(baseUrl, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  }).then(res => res.json());\n}\n\nexport async function postReservation(name, slot) {\n  return fetch(`${baseUrl}/book`, {\n    method: 'POST',\n    body: JSON.stringify({\n      name,\n      slot,\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  }).then(res => res.json());\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport './App.css';\nimport { getFormattedReservations, postReservation } from './utils';\n\nconst BookedReservations = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-left: 10em;\n`;\n\nconst ReservationForm = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Input = styled.input`\n  padding: 0.5em;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  max-width: 700px;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst Button = styled.button`\n  width: 7em;\n  margin: 1em;\n`;\n\nclass App extends React.Component {\n  state = {\n    bookedReservations: [],\n    availableHours: [],\n    resName: '',\n  };\n\n  componentDidMount() {\n    this.refreshReservations();\n  }\n\n  refreshReservations = () => {\n    getFormattedReservations().then(reservations => {\n      const available = Object.keys(reservations.available).filter(\n        hour => reservations.available[hour] !== 0\n      );\n\n      this.setState({\n        bookedReservations: reservations.booked,\n        availableHours: available,\n      });\n    });\n  };\n\n  addReservation = async timeSlot => {\n    if (this.state.resName === '' || typeof this.state.resName !== 'string') {\n      alert('must be string');\n      return;\n    }\n    let day = new Date();\n    day.setHours(timeSlot.slice(0, 2), timeSlot.slice(3, 5), 0, 0);\n\n    const newReservation = await postReservation(this.state.resName, day);\n    console.log('newReservation:', newReservation);\n\n    this.setState({\n      resName: '',\n    });\n\n    this.refreshReservations();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>{'Janky Meats'}</div>\n\n        <BookedReservations>\n          <div>RESERVATIONS</div>\n          {this.state.bookedReservations.map((res, ind) => (\n            <div key={res.name + res.slot + ind}>\n              {res.name} {res.slot}\n            </div>\n          ))}\n        </BookedReservations>\n\n        <ReservationForm>\n          <Input\n            type=\"text\"\n            value={this.state.resName}\n            placeholder=\"Enter your name\"\n            onChange={e => this.setState({ resName: e.target.value })}\n          />\n\n          <ButtonContainer>\n            {this.state.availableHours.map(timeSlot => (\n              <Button onClick={() => this.addReservation(timeSlot)}>\n                {timeSlot.slice(0, 2) - 12} {timeSlot.slice(2)} PM\n              </Button>\n            ))}\n          </ButtonContainer>\n        </ReservationForm>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}